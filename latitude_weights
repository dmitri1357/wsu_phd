#!/usr/bin/env python3

import numpy as np

## calculate latitude weights

# this example is over the Mexico-Texas domain
lats = np.arange(14.75,36.76,0.25)
lons = np.arange(-118.5,-86.74,0.25)
lats = np.append(lats,37)
lons = np.append(lons,-86.5)

lat_diff = 0.25
lat_dist = np.abs(lat_diff * 111) # 111 km for one degree of latitude (approximate)
lon_diff = 0.25

areas = np.empty([89,128])
for i in range(89): # 89 latitude bands at 0.25 deg resolution
    lat1 = lats[i] # grab current latitude
    for j in range(128): # 128 longitude bands
        lon1 = lons[j] # left edge
        lon2 = lons[j+1] # right edge
        cosrad = np.cos(np.deg2rad(lat1)) # fraction of longitude width at this latitude, relative to width at equator
        deg1 = cosrad * 111.32 # 111.32 km is the width of one degree of longitude at equator
        # need to multiply cosrad by deg1 to get the actual width of one degree of longitude at current latitude
        lon_dist = deg1 * lon_diff # actual width of longitude at current resolution (0.25 degrees) 
        # if your resolution is 1 degree, you can skip line 26 
        areas[i,j] = lat_dist * lon_dist

area_vec = np.reshape(areas,11392)

# find the middle value, and normalize the domain by this value
norm_middle = ((np.max(area_vec) - np.min(area_vec)) / 2) + np.min(area_vec)
area_vec = area_vec/norm_middle # ~682.8 sqkm is middle value (note = this is not the same as simply taking the average of the grid cell areas, although it's close)

### the "area_vec" variable is then multiplied by your climate variable (e.g., Tmax) - the result is area-weighted Tmax
