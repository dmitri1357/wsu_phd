#!/usr/bin/env python3

import numpy as np
from scipy import stats

# example code to calculate trend at a grid cell over a 42 year period
x = np.arange(1,43,1)
y = some_time_series
slope = stats.linregress(x,y)[0] # indexing into [0] extracts the slope

# determine p-value from nonparametric permutation test with 10,000 iterations
x = np.arange(1,43,1)
slopes1 = np.empty(10000) # these are 10,000 randomly generated slopes after data shuffling
for k in range(10000):
    run = np.random.permutation(some_time_series)
    slopes1[k] = stats.linregress(x,run)[0]
slope_perc = stats.percentileofscore(slopes1, slope) # get percentile of real slope when compared to the 10,000 random slopes

# this is a two-tailed test, so run this code too
if slope > 0:
    permuted_pvals = 100 - slope_perc # if real slope is positive, then p-value is the inverse of the percentile
else:
    permuted_pvals = slope_perc
permuted_pvals = permuted_pvals/100 # divide by 100 since percentile was calculated on 0-100 scale, need to transform back to 0-10,000 scale
print(permuted_pvals)
